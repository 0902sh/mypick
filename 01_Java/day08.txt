Day8

1. Generic
    - 데이터의 타입을 일반화한다(Generalize)
    - 클래스와 메서드에서 사용할 타입을 설계도에 저장하지 않고
      컴파일할 때 지정하는 기술
      -> 사용자가 사용할 때 타입을 결정
    - JDK 1.5 때 도입, 그 전에는 Object를 사용
    - Object를 사용하면
      데이터 입력 시 모든 데이터 입력이 가능하므로
      잘못된 데이터가 들어갈 수 있으며
      데이터 사용 시 타입을 모르면 알아내야 하며
      Casting을 반드시 해야 사용 가능

      Animal<T> : T, K , V, E

=> Generic1.java, Generic2.java

2. Lambda
(1) Introduction
    1930년대, 알론조 처치라는 수학자가 제시한
    함수의 수학적 표기법
    => 람다 대수(Lambda Calculus)에 기초
    Java 8(2014)부터 지원
    객체 지향 프로그램에 함수형 프로그래밍의 특징이 추가

(2) 함수형 프로그래밍
    일반적으로 프로그램은 메서드끼리 **데이터**를 주고 받는 것
    데이터가 이미 있고, 함수를 넘겨주는 방식

    함수(메서드)는 기본적으로 어떤 클래스의 소속이어야만 함
    => 정의하는 것도 짜증나는데 클래스도 만드는건 너무 불편함
    => 심지어 일회성(재활용 불가)
    => 그래서 익명 객체를 사용

(3) 익명 객체(Anonymous Object)
    첫 번째, 데이터 개수는 고정이니 선언은 할 수 있네
            => 인터페이스
    두 번째, 객체를 생성할 때(클래스를 안 만들고)
            메서드 구현
            => 사용자가 메서드는 만들어야 하는데
               메서드 정의가 너무 길다.....
            => 줄여야겠다 => 람다식

(4) 정리
    무슨 타입인지를 사용자에게 맡김
    => Generic
    무슨 함수를 사용할 지를 사용자에게 맡김
    => 함수형 프로그래밍은
    함수를 (  )에 다 넣으려니 길고 복잡
    => 람다식

(5) 기본 형식
    Method(매개변수들....) {
        실행문;
    }

    (매개변수들....) -> { 실행문; }

=> Calulable.java CalculableClass.Java

3. Thread
(1) 정의
    프로세스 내의 메모리 블럭
    동시에 수행 가능한 프로세스
(2) Thread 클래스
    멀티스레드를 구현할 수 있음
    1) 생성 방법
        Thread(), Thread(String s)
    2) 주요 함수
        sleep(long msec) : msec 동안 아무 일도 하지 않음
        getName() : thread 이름 가져오기
        start() : 스레드를 시작, run() 호출
        run() : 스레드가 일하는 메인 부분
        suspend(), resume() : 중단, 재개

(3) Thread 구현 방법
    1) Thread 클래스 상속
    2) Runnable 인터페이스 구현
    1)에 비해 2)가 더 복잡하고 구현이 귀찮음

4. SWING
(1) 예전에 Java GUI는 AWT로 개발
    SWING은 AWT의 후속 버전으로 기본으로 설치

    1) 기본 특징
        컴포넌트가 플랫폼 독립적
        커스터마이징을 통해 look and feel 설정
        다수의 컴포넌트

    2) 사용 방법
        JFrame을 상속
        JFrame을 멤버로 영입

(2) 리스너(Listener)
    이벤트(클릭 등)를 주시하는 역할
    리스너를 달지 않으면 이벤트가 발생해도 무시

5. 웹 크롤링(=웹 스크래핑)
(1) 크롤링의 어원
    최초의 검색엔진의 이름 : 크롤러
    크롤러는 무슨 일을 합니까? 크롤링
(2) 웹 상의 데이터를 수집하고
    필요한 데이터만 추출하는 것
(3) 크롤링 라이브러리
    파이썬의 BeautifulSoup의 자바 버전인
    JSoup를 이용
    => 구문을 해석하여 필요한 내용 추출하
(4) 크롤링 절차
    1) JSoup 라이브러리 다운받기
    2) PC에 내가 아는 디렉토리로 저장
       eclipse > extlib를 만들고 저장
    3) 이클립스 프로젝트 우클릭
       Properties > Java Build Path >
       Library탭 > classpath 선택 >
       Add External Jars 버튼 클릭
(5) 크롤링에 유익한 지식
    CSS Selector

=> CrawlTest.java