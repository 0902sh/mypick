Day4

1. 배열(Array)
    - 동일한 특성을 갖는 여러 개의 변수의 모음
    - 학생 이름에 대한 1000개의 변수
      stdName000 ~ stdName999 : 학생 이름 변수
      이상한 요구 : 모든 학생 이름 앞에 knight.을 추가
    - stdName[1000] -> stdName[0] - 첫 번째 학생
      for(int i=0; i<1000; i++)
        stdName[i] = "knight." + stdName[i]
    - 배열은 자체적으로 length라는 변수
      -> 데이터가 몇 개 들어있는가?
    - 값 한 개만 존재 : scalar
      값 여러 개가 존재하는 것 : vector
      값 여러 개가 여러 묶음 있는 것 : matrix

2. 클래스와 객체지향(Object-oriented)
(1) 정의
    클래스(Class) : 설계도
    객체(Object) : 설계도로 만든 제품
    
    클래스는 객체로 구현될 때 의미가 있다.
    cf) Apple 과 An Apple

    객체지향 언어의 목적은 코드 개발 최소화
    객체지향 프로그래밍은 클래스를 디자인하는 것

    학생A, 학생B, 학생C
    다 학생
    다 우리 지역 사람
    다 사람
    다 동물
    다 만물(Object)

(2) 객체지향 언어의 특징
    1) 상속(Inheritance)  * 유전에 가깝다
       하위 클래스가 상위 클래스를 물려받는 것
    2) 다형성(Polymorphism)
       같은 이름으로 호출했는데,
       호출한 인자의 타입에 따라 다르게 설계
    3) 추상화(Abstraction)
       사물(객체)의 속성이나 특성을 추출하는 단계
    4) 캡슐화(Encapsulation)
       내부를 공개하지 않는 것(예 - 리모콘)
       불필요하게 복잡한 것을 피하고 위험에서 보호

3. 클래스의 구조
(1) 필드(Field)
    클래스가 가지고 있는 변수
    클래스 함수 내에 있는 변수는 아님
    멤버 변수(member variable)

(2) 메서드(Method)
    함수인데, 클래스 소속의 함수
    멤버 함수(member function)

(3) 생성자(Constructor)
    클래스가 객체(제품)로 만들어질 때 반드시 실행되는 함수
    클래스가 객체로 만들어질 때 반드시 해야될 일
    함수 이름이 클래스명과 동일하며, 리턴값이 없음

4. 클래스 탄생 히스토리
    변수 : 하나의 값만 저장
    배열 : 여러 개의 값을 저장
    구조체(struct) : 여러 종류의 값을 저장
                  cf) typedef { int age, char* name } man;
                  man man1; man1.age = 900, man1.name = "Abraham"
클래스 : 여러 종류의 값 뿐 아니라 여러 형태의 함수

5. 필드(Field)
    - 클래스 내에는 3가지 타입의 변수 존재
    - 1) 클래스 변수
    - 2) 인스턴스 변수
    - 3) 로컬 변수
    - 이 중 1)과 2)를 Field라고 함

    (1) 클래스 변수
        모든 객체가 공유하는 변수
        변수 앞에 static 키워드 사용
        객체 생성 없이도 사용 가능(클래스명.변수명)
        
        
    (2) 인스턴스 변수
        객체가 가지고 있는 변수
        인스턴스 = 객체
        ex) 트럭은 객체이다.
            트럭은 자동차의 인스턴스이다.
        변수 앞에 static 없음

    (3) 로컬 변수
        함수(메서드) 내, 제어문 내에서 선언
        함수 또는 제어문이 종료되면 사라진다.
        