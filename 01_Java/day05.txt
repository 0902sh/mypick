Day5

1. 요약
    java로 개발한다는 것 > 클래스를 만드는 것'
    클래스는 객체로 구현해야 완성된다.

    java는 웹 개발에 사용하는 것을 기본
    누가 먼저라는 개념은 없음

    java로 만들어진 객체는 웹 서버(ex 톰캣)
    가 관리하는 컨테이너라는 곳에 만들어진다.
    사용자가 요청할 때마다 객체를 빌려쓰는 구조

    java로 만드는 배치프로그램?
    public static void mant(String[])
    를 통해 직접 실행

    클래스 내의 변수
    - 클래스 변수(static)
    - 인스턴스 변수
    - 로컬 변수

2. 메서드(Method)
    - 함수인데, 클래스가 가지고 있는 함수
    - 본명 : 멤버 함수
    
    public static void main(String[] args)
    접근제한자
          [static]
                  리턴타입
                       메서드명
                           (매개변수들)
    1) 접근제한자
        이 함수를 누가 실행할 수 있는가?(권한)
        제일 넓은 권한이 public(누구나)

    2) static
        객체 생성을 하지 않아도 사용할 수 있다.
        왜 객체 생성을 안해도 되는가?
            => 객체마다 다를게 없거든
            => 공통 영역에 만들어 지거든

    3) 리턴타입
        메서드는 값을 받기만 하는가? No
        일을 다 하고 결과를 전송해야 할 때
        void : 돌려주는 것 없음
        int, float, double, String
        String[], int[], Person, Person[]

    4) 메서드명
        변수명 규칙과 동일, 일반적으로 동사+목적어(명사)
        printScreen, getMember, getAllVariables

    5) 매개변수
        메서드의 입력값
        입력값의 개수가 정해져 있을 때(int a, int b)
        입력값의 개수가 정해져 있지 않을 때(String[] args)

3. 메서드 오버로딩(Overloading)
    같은 이름의 메서드로 다양한 입력값을 처리
    printVar(int a)
    printVar(String a)
    printVar(double[] a)
        - java는 이런 식으로 같은 이름의 여러 메서드를
          만들 수 있고, 사용자의 편의성을 위함

    cf) c등 타 언어
    printVar1(int a)
    printVar2(String a)
    printVar3(double[] a)
        - 사용자가 변수에 따라 다른 함수이름을
          다 알고 있어야 사용 가능

    - 메서드 오버라이딩(Overriding)과 비교됨

4. this와 초기화 블럭
(1) this
    - 객체가 자신을 부르는 말(왕이 짐이라 표현하는 것)

(2) 초기화 블럭
    2가지의 타입이 있음
    static {      }
    {             }


=> ClassTest.실습

5. 권한
(1) 패키지
    클래스를 디렉토리별로 관리하기 위한 목적(기능별, 권한별)
    * 라이브러리 : 여러 개의 패키지

(2) 접근제어
    public : 누구든지(O)
    protected : 누구든지(X), 상속받은(O), 같은 디렉토리(O), 클래스내(O)
    (default) : 누구든지(X), 상속받은(O), 같은 디렉토리(O), 클래스내(O)
    private : 누구든지(X), 상속받은(X), 같은 디렉토리(X), 클래스내(O)

(3) final
    변수에 final을 붙이면 수정 불가
    메서드에 final을 붙이면 상속 후 수정(Overriding)
    클래스에 final을 붙이면 상속 불가

=> AuthEx.java

=> DepartEx.java로 연습

6. 상속(Inheritance)
(1) 객체지향언어의 가장 큰 특징 > 재사용성 > 상속
    상속은 부모 클래스로부터 변수와 메서드를 물려받는 것
    클래스를 만들 때 처음부터 만드는 것이 아니라
    일단 부모로부터 받고 추가적인 것이나 변경해야 할 부분만 수정
    
(2) 상속의 특징
    1) 용어
        부모, 슈퍼, 상위, 베이스 : 상속을 주는 클래스
        자식, 서브, 하위, 파생(derived) : 상속을 받는 클래스
    2) 클래스 상속 방법
        extends 키워드 사용
        class Child extends Parent {


        }
    3) 상속의 특징
        - 단일 상속만 가능
        - 부모 객체가 먼저 생성되고 자식 객체 생성
        - 모든 클래스의 조상 : Object
    4) super
        - 자식 클래스에서 부모 객체를 부르는 이름
        - super.필드, super.메서드

    (3) 메서드 재정의(Overriding)
        부모 : print(String str)
        자식 : print(String aaa)
        => 같은 메서드이다.
        1) 부모 클래스의 메서드를 자식 클래스가 변경하는 것
        2) 메서드명 뿐 아니라 메서드의 변수 타입이 동일
           변수 타입이 다르면? => 오버로딩(Overloading)
        3) 동일한 이름, 타입의 메서드는 자식 메서드가 우선
        4) 부모의 권한과 같거나 낮은 권한
    
    (4) 다형성(Polymorphism)
        1) 
            int i = 10;
            double d = i;  // 문제없이 동작

            double b = 10.34;
            int j = b;  // 넓은데서 좁은데로 못감
            int j =(int)b;
        2) 클래스의 형변환
            Parent p = new Child(); (O)
            Child c = new Parent(); (X)
            Child c = (Child)p; (O)

            Parent p = new Parent();
            Child c = (Child)p; (X)

            Food라는 클래스가 있다.
            이 클래스를 100년 후에 상속한 FrenchFood, KoreanFood, AmeericanFood가 있다고 가정

            Food 클래스 활동 당시에
            eatFood라는 메서드가 있어서
            eatFood(Food f){
                print(f.name + "을 먹는다");
            }

            FrenchFood fran;
            KoreanFood kor;
            eatFood(fran);
            eatFood(kor);

            상속받은 클래스가 늘어나더라도
            메서드 신규 생성이 필요 없음

    => ClassP, ClassC